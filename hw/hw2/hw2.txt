The solution uses two main functions called get_derivation and test_rule. The get_derivation function takes in the possible list of grammar rules and tests each rule list by passing it to the test_rule function. The test_rule function will take in each rule list and parses the list to check whether or not the first symbol is a nonterminal or a terminal symbol. If it is a nonterminal symbol the function will call its mutally recursive function get_derivation to find a possible derivation for the fragment, while passing the next grammar function it must use to continue its search. If it is a terminal symbol it will then check whether or not is it contains the string that we are looking for. It will then call itself again with the rest of the list containing the match; this case will allow for the checking of matches when we encounter parens signs. 

The main idea is that these two functions will parse through / handle two different types of lists. One list is the list of rule lists for a possible symbol that can be used to generate a grammar tree that we search through recursively. The other list is a list composed of symbols to create a rule. 